#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import DL_for_HTT.common.NN_settings as NN_default_settings

from optparse import OptionParser
usage = "usage: %prog [options] <input hdf5>"
parser = OptionParser(usage=usage)
parser.add_option("-m", "--minmass", dest = "min_mass",
                  default = NN_default_settings.min_mass)
parser.add_option("-M", "--maxmass", dest = "max_mass",
                  default = NN_default_settings.max_mass)
parser.add_option("-t", "--train_frac", dest = "train_frac",
                  default = NN_default_settings.train_frac)
parser.add_option("-v", "--valid_frac", dest = "valid_frac",
                  default = NN_default_settings.valid_frac)
parser.add_option("-r", "--random_seed", dest = "random_seed",
                  default = NN_default_settings.random_seed)

(options,args) = parser.parse_args()

options.min_mass = float(options.min_mass)
options.max_mass = float(options.max_mass)
options.train_frac = float(options.train_frac)
options.valid_frac = float(options.valid_frac)
options.random_seed = int(options.random_seed)

input_file = args[0]
output_file = input_file.replace(".h5", "")

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd

# Load data
df = pd.read_hdf(input_file)

# make transverse masses
pt_str = "pt"
phi_str = "phi"    
for ana in ["reco", "gen"]:
    df["mT1_{ana}".format(ana=ana)] = (2*df["tau1_{pt}_{ana}".format(pt=pt_str, ana=ana)].astype('float32')*df["MET_{pt}_{ana}".format(pt=pt_str, ana=ana)].astype('float32')*(1-np.cos(df["tau1_{phi}_{ana}".format(phi=phi_str, ana=ana)].astype('float32')-df["MET_{phi}_{ana}".format(phi=phi_str, ana=ana)].astype('float32'))))**.5
    df["mT2_{ana}".format(ana=ana)] = (2*df["tau2_{pt}_{ana}".format(pt=pt_str, ana=ana)].astype('float32')*df["MET_{pt}_{ana}".format(pt=pt_str, ana=ana)].astype('float32')*(1-np.cos(df["tau2_{phi}_{ana}".format(phi=phi_str, ana=ana)].astype('float32')-df["MET_{phi}_{ana}".format(phi=phi_str, ana=ana)].astype('float32'))))**.5
    df["mTtt_{ana}".format(ana=ana)] = (2*df["tau1_{pt}_{ana}".format(pt=pt_str, ana=ana)].astype('float32')*df["tau2_{pt}_{ana}".format(pt=pt_str, ana=ana)].astype('float32')*(1-np.cos(df["tau1_{phi}_{ana}".format(phi=phi_str, ana=ana)].astype('float32')-df["tau2_{phi}_{ana}".format(phi=phi_str, ana=ana)].astype('float32'))))**.5
    df["mTtot_{ana}".format(ana=ana)] = (df["mT1_{ana}".format(ana=ana)].astype('float32')**2+df["mT2_{ana}".format(ana=ana)].astype('float32')**2+df["mTtt_{ana}".format(ana=ana)].astype('float32')**2)**.5

df["PuppimT1_{ana}".format(ana="reco")] = (2*df["tau1_{pt}_{ana}".format(pt=pt_str, ana="reco")].astype('float32')*df["PuppiMET_{pt}_{ana}".format(pt=pt_str, ana="reco")].astype('float32')*(1-np.cos(df["tau1_{phi}_{ana}".format(phi=phi_str, ana="reco")].astype('float32')-df["PuppiMET_{phi}_{ana}".format(phi=phi_str, ana="reco")].astype('float32'))))**.5
df["PuppimT2_{ana}".format(ana="reco")] = (2*df["tau2_{pt}_{ana}".format(pt=pt_str, ana="reco")].astype('float32')*df["PuppiMET_{pt}_{ana}".format(pt=pt_str, ana="reco")].astype('float32')*(1-np.cos(df["tau2_{phi}_{ana}".format(phi=phi_str, ana="reco")].astype('float32')-df["PuppiMET_{phi}_{ana}".format(phi=phi_str, ana="reco")].astype('float32'))))**.5
df["PuppimTtt_{ana}".format(ana="reco")] = df["mTtt_{ana}".format(ana="reco")]
df["PuppimTtot_{ana}".format(ana="reco")] = (df["PuppimT1_{ana}".format(ana="reco")].astype('float32')**2+df["PuppimT2_{ana}".format(ana="reco")].astype('float32')**2+df["PuppimTtt_{ana}".format(ana="reco")].astype('float32')**2)**.5

df["mT1_{ana}".format(ana="leg_gen")] = (2*df["leg1_{pt}_{ana}".format(pt=pt_str, ana="gen")].astype('float32')*df["MET_{pt}_{ana}".format(pt=pt_str, ana="gen")].astype('float32')*(1-np.cos(df["leg1_{phi}_{ana}".format(phi=phi_str, ana="gen")].astype('float32')-df["MET_{phi}_{ana}".format(phi=phi_str, ana="gen")].astype('float32'))))**.5
df["mT2_{ana}".format(ana="leg_gen")] = (2*df["leg2_{pt}_{ana}".format(pt=pt_str, ana="gen")].astype('float32')*df["MET_{pt}_{ana}".format(pt=pt_str, ana="gen")].astype('float32')*(1-np.cos(df["leg2_{phi}_{ana}".format(phi=phi_str, ana="gen")].astype('float32')-df["MET_{phi}_{ana}".format(phi=phi_str, ana="gen")].astype('float32'))))**.5
df["mTtt_{ana}".format(ana="leg_gen")] = (2*df["leg1_{pt}_{ana}".format(pt=pt_str, ana="gen")].astype('float32')*df["leg2_{pt}_{ana}".format(pt=pt_str, ana="gen")].astype('float32')*(1-np.cos(df["leg1_{phi}_{ana}".format(phi=phi_str,ana="gen")].astype('float32')-df["leg2_{phi}_{ana}".format(phi=phi_str,ana="gen")].astype('float32'))))**.5
df["mTtot_{ana}".format(ana="leg_gen")] = (df["mT1_{ana}".format(ana="leg_gen")].astype('float32')**2+df["mT2_{ana}".format(ana="leg_gen")].astype('float32')**2+df["mTtt_{ana}".format(ana="leg_gen")].astype('float32')**2)**.5
    

# define target and input variables
target = "Higgs_mass_gen"

# look for variables distributions
# df.hist(figsize = (24,20), bins = 500, log=True)
# plt.plot()
# plt.savefig("variables.png")
# plt.close('all')
# C_mat = df.corr()
# fig = plt.figure(figsize = (15,15))
# mask = np.zeros_like(C_mat)
# mask[np.triu_indices_from(mask)] = True
# import seaborn as sb
# sb.heatmap(C_mat, vmax = 1, square = True, center=0, cmap='coolwarm', mask=mask)
# fig.savefig("correlations.png")
# plt.close('all')

def train_valid_test_split(df, train_size=.6, valid_size=.2, test_size=.2, seed=None):
    np.random.seed(seed)
    total_size = train_size + valid_size + test_size
    train_percent = train_size / total_size
    valid_percent = valid_size / total_size
    test_percent = test_size / total_size
    perm = np.random.permutation(df.index)
    m = len(df)
    train_end = int(train_percent * m)
    valid_end = int(valid_percent * m) + train_end
    train = perm[:train_end]
    valid = perm[train_end:valid_end]
    test = perm[valid_end:]
    return train, valid, test

# Split index ranges into training and testing parts with shuffle
train_size = options.train_frac
valid_size = options.valid_frac
test_size = 1 - (options.train_frac + options.valid_frac)
test_size = max([0, test_size])

np_train, np_valid, np_test = train_valid_test_split(
    df,
    train_size = train_size,
    valid_size = valid_size,
    test_size = test_size,
    seed = options.random_seed)

df["is_train"] = np.zeros(len(df[target]))
df["is_valid"] = np.zeros(len(df[target]))
df["is_test"] = np.zeros(len(df[target]))
df.loc[np_train, ["is_train"]] = 1
df.loc[np_valid, ["is_valid"]] = 1
df.loc[np_test, ["is_test"]] = 1

# remove out of range masses
df.loc[(df[target] < options.min_mass) | (df[target] > options.max_mass), ["is_train"]] = 0
df.loc[(df[target] < options.min_mass) | (df[target] > options.max_mass), ["is_valid"]] = 0
df.loc[(df[target] < options.min_mass) | (df[target] > options.max_mass), ["is_test"]] = 0

# compute samples weights to account for non flat mass distribution
df["sample_weight"] = np.ones(len(df))
mass_step_GeV = 2
for subsample in ["is_train", "is_valid", "is_test"]:
    for mH in range(int(options.min_mass), int(options.max_mass)+1, mass_step_GeV):
        population = len(df.loc[(df[subsample] == 1) & (df[target] >= mH - mass_step_GeV/2) & (df[target] < mH + mass_step_GeV/2), ["sample_weight"]])
        if population > 0:
            df.loc[(df[subsample] == 1) & (df[target] >= mH - mass_step_GeV/2) & (df[target] < mH + mass_step_GeV/2), ["sample_weight"]] *= 1./population
        elif population == 0:
            df.loc[(df[subsample] == 1) & (df[target] >= mH - mass_step_GeV/2) & (df[target] < mH + mass_step_GeV/2), ["sample_weight"]] *= 0
    df.loc[(df[subsample] == 1), ["sample_weight"]] *= 1./df.loc[(df[subsample] == 1), ["sample_weight"]].mean()
    # avoid overweighted samples
    # df.loc[(df[subsample] == 1) & (df["sample_weight"] > 2), ["sample_weight"]] = 2
    # df.loc[(df[subsample] == 1), ["sample_weight"]] *= 1./df.loc[(df[subsample] == 1), ["sample_weight"]].mean()

for k in df:
    if any([s in k for s in ["is_", "was_"]]):
        df[k] = df[k].astype('bool')
    elif k == 'Event_gen':
        df[k] = df[k].astype('int32')
    elif any([s in k for s in ["_charge_", "_pdgId_"]]):
        df[k] = df[k].astype('int8')
    elif any([s in k for s in ["_eta_", "_phi_", "_pt_", "_mass_", "_btagDeepB_", "mT"]]):
        df[k] = df[k].astype('float16')
    elif df[k].dtype == 'float64':
        df[k] = df[k].astype('float32')
    elif df[k].dtype == 'int64':
        df[k] = df[k].astype('int16')

df.to_hdf("{}.h5".format(output_file), key='df')
