#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import DL_for_HTT.common.NN_settings as NN_default_settings

import DL_for_HTT.post_training.utils as utils
import DL_for_HTT.post_training.macros as macros

from argparse import ArgumentParser
usage = "usage: prog [options] <NN JSON file> <NN input file>"
parser = ArgumentParser(usage=usage)
parser.add_argument("--model", required = True, type=str, help="json file from model saving.")
parser.add_argument("--events", required = True, type=str, help="h5 file containing events.")
parser.add_argument("--prefix",
                    default = '')
parser.add_argument("--min_mass",
                  default = NN_default_settings.min_mass)
parser.add_argument("--max_mass",
                  default = NN_default_settings.max_mass)
parser.add_argument("--channel",
                  default = "inclusive")
parser.add_argument("--plots",
                  default = 'all')
parser.add_argument("--subsample",
                  default = 'test')
parser.add_argument("--variables_list",
                    default = 'default')

args = parser.parse_args()

args.min_mass = float(args.min_mass)
args.max_mass = float(args.max_mass)

if args.plots == 'all':
    args.plots = macros.available_plots.keys()
else:
    args.plots = args.plots.split(',')
    #args.plots = [p for p in args.plots if p in macros.available_plots.keys()]

if args.variables_list == 'default':
    args.variables_list = 'target'
args.variables_list = set(args.variables_list.split(','))
if 'all' in args.variables_list :
    args.variables_list.remove('all')
    args.variables_list = args.variables_list.union(['target', 'inputs'])
if 'target' in args.variables_list :
    args.variables_list.remove('target')
    args.variables_list = args.variables_list.union([NN_default_settings.target])
if 'inputs' in args.variables_list :
    args.variables_list.remove('inputs')
    args.variables_list = args.variables_list.union(NN_default_settings.inputs)

loaded_model, model_type, model_name = utils.load_model_from_json(args.model)
if model_type != 'XGBoost' and 'feature_importance' in args.plots:
    args.plots.remove('feature_importance')

df = utils.load_h5_file_and_predict(
    args.events,
    loaded_model, model_type,
    inputs = NN_default_settings.inputs,
    target = NN_default_settings.target,
)

if args.subsample == 'all':
    df_filtered = df.loc[(df['is_train']==1) | (df['is_valid']==1) | (df['is_test']==1)]
elif args.subsample in ['train', 'valid', 'test']:
    df_filtered = df.loc[df['is_{}'.format(args.subsample)]==1]
else:
    print("Using ALL available data for plotting!")

if args.prefix != '':
    if args.prefix[-1] != '-':
        args.prefix += '-'

plotting_parameters = {
    'df' : df_filtered,
    'df_all' : df,
    'channel' : args.channel,
    'model' : loaded_model,
    'model_name' : model_name,
    'min_mass' : args.min_mass,
    'max_mass' : args.max_mass,
    'inputs' : NN_default_settings.inputs,
    'target' : NN_default_settings.target,
    'prefix' : args.prefix,
    'variables_list' : args.variables_list,
}

for plot in args.plots:
    print("Drawing {}".format(plot))
    macros.available_plots[plot](**plotting_parameters)
