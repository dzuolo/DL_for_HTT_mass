#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import DL_for_HTT.common.NN_settings as NN_default_settings

import DL_for_HTT.post_training.utils as utils
import DL_for_HTT.plotting_samples.macros as macros

from argparse import ArgumentParser
usage = "usage: prog [options] <NN JSON file> <NN input file>\n\nPlots the analysis selection efficiency as function of the Higgs mass"
parser = ArgumentParser(usage=usage)
#parser.add_argument("--model", required = True, type=str, help="json file from model saving.")
parser.add_argument("--events", required = True, type=str, help="h5 file containing events.")
parser.add_argument("--pdf", action="store_true", help="Produce pdf plots instead of png.")
parser.add_argument("--prefix",
                    default = '')
parser.add_argument("--min_mass",
                  default = NN_default_settings.min_mass)
parser.add_argument("--max_mass",
                  default = NN_default_settings.max_mass)
parser.add_argument("--channel",
                  default = "inclusive")
parser.add_argument("--plots",
                    default = ["analysis_cuts_efficiency"])
parser.add_argument("--subsample",
                    default = "all")
parser.add_argument("--variables_list",
                    default = 'default')
# parser.add_argument("--model_inputs",
#                     default = None)
parser.add_argument("--language",
                    default = "fr")

args = parser.parse_args()

args.min_mass = float(args.min_mass)
args.max_mass = float(args.max_mass)

if args.language == "eng":
    args.language = "en"

available_languages = ["fr", "en"]
if args.language not in available_languages:
    raise NotImplementedError ("Language {} not available. Possibles are: {}".format(args.language, ", ".join(available_languages)))

# Fake the loading of a model to be able to use the common plotting macros
loaded_model, model_type, model_name = None, None, "PuppimTtot_reco"
df = utils.load_h5_file_and_predict(
    args.events,
    loaded_model, model_type, model_name,
    inputs = [],
    target = NN_default_settings.target,
)

if args.subsample == 'all':
    df_filtered = df.loc[(df['is_train']==1) | (df['is_valid']==1) | (df['is_test']==1)]
elif args.subsample in ['train', 'valid', 'test']:
    df_filtered = df.loc[df['is_{}'.format(args.subsample)]==1]
else:
    print("Using ALL available data for plotting!")

if args.prefix != '':
    if args.prefix[-1] != '-':
        args.prefix += '-'

if args.subsample != "test":
    args.prefix += args.subsample + "-sample-"
    
plotting_parameters = {
    'df' : df_filtered,
    'df_all' : df,
    'channel' : args.channel,
    'model' : loaded_model,
    'model_name' : model_name,
    'min_mass' : args.min_mass,
    'max_mass' : args.max_mass,
    'target' : NN_default_settings.target,
    'prefix' : args.prefix,
    'variables_list' : args.variables_list,
    'subsample' : args.subsample,
    'language' : args.language,
    'file_format' : "pdf" if args.pdf else "png",
}

for plot in args.plots:
    print("Drawing {}".format(plot))
    macros.available_plots[plot](**plotting_parameters)
