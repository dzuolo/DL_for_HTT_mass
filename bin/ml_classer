#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os

from optparse import OptionParser
usage = "usage: %prog [options] <perfs>"
parser = OptionParser(usage=usage)
# parser.add_option("-o", "--output", dest = "output",
#                   default = "NN")

(options,args) = parser.parse_args()

models_perfs = {}
classements = {}

for model_perf in args:
    models_perfs[model_perf] = {}
    for region in ["low", "medium", "high", "full"]:
        for perf in ["median_diff", "CL68_width", "CL95_width", "CL68_calibr_width", "CL95_calibr_width"]:
            key="_".join([region, perf])
            if "low_CL95" in key:
                continue
            if key not in classements:
                classements[key] = []
            models_perfs[model_perf][key] = float(os.popen('grep {} {}'.format(key, model_perf)).readlines()[0][:-1].split(" ")[1])

for key in classements:
    classements[key] = sorted(
        [k for k in models_perfs.keys()],
        key = lambda k : models_perfs[k][key],
        reverse = False,
        )

print("Classements faits. Filtrage en cours ...")

N_models = len(args)

# Keep all models in top 5% for each classes
Kept = set()
for key in classements:
    for model in classements[key][:int(len(classements[key])*0.05)+1]:
        Kept.add(model)

for model in [model for model in Kept]:
    if any([classements[key].index(model)+1 > N_models*0.75 for key in classements]):
        Kept.remove(model)
        
for model in Kept:
    print(model)
    for key in classements:
        print("    {} : {}/{}".format(key, classements[key].index(model)+1, N_models))

print(len(Kept))
import pdb; pdb.set_trace()

